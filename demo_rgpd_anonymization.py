#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
D√©monstration du syst√®me d'anonymisation RGPD pour OpenAI
Teste l'anonymisation et la d√©sanonymisation des donn√©es d'√©l√®ves
"""

import sys
from pathlib import Path

# Ajouter le dossier src au PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from models.bulletin import Eleve, AppreciationMatiere, Bulletin
from services.openai_service import RGPDAnonymizer, OpenAIService

def test_rgpd_anonymizer():
    """Test du syst√®me d'anonymisation RGPD"""
    print("üîí Test du syst√®me d'anonymisation RGPD")
    print("=" * 50)
    
    # Cr√©er un anonymiseur
    anonymizer = RGPDAnonymizer()
    
    # Donn√©es de test avec de vrais noms d'√©l√®ves
    eleves = [
        ("DANLER", "Suheda"),
        ("ERKAN", "Ela"), 
        ("KANOUNE", "Bilal"),
        ("SAIL", "Amani"),
        ("UK√ãSMAJLI", "Anesa"),
        ("YUCEL", "Enis")
    ]
    
    # Textes d'appr√©ciations avec noms d'√©l√®ves
    appreciations_test = [
        "Suheda est une √©l√®ve du dispositif ULIS. Elle assiste calmement au cours.",
        "Ela ne participe toujours pas ! Quel dommage ! Elle en a pourtant les capacit√©s.",
        "Bilal a d'ind√©niables capacit√©s qu'il a d'avantage utilis√©es ce semestre.",
        "Amani est tout bonnement excellente et ne manque aucune occasion de r√©ussir.",
        "Anesa est excellente et acquiert rapidement les comp√©tences linguistiques.",
        "Enis est devenu clairement l'√©l√®ve perturbateur de la classe."
    ]
    
    print("\nüìù Test d'anonymisation des appr√©ciations:")
    print("-" * 40)
    
    for i, ((nom, prenom), appreciation) in enumerate(zip(eleves, appreciations_test)):
        print(f"\n{i+1}. √âl√®ve: {nom} {prenom}")
        print(f"   Original  : {appreciation}")
        
        # Anonymisation
        anonymized = anonymizer.anonymize_text(appreciation, nom, prenom)
        print(f"   Anonymis√© : {anonymized}")
        
        # D√©sanonymisation
        deanonymized = anonymizer.deanonymize_text(anonymized, nom, prenom)
        print(f"   Restaur√©  : {deanonymized}")
        
        # V√©rification
        if deanonymized == appreciation:
            print("   ‚úÖ R√©versibilit√© correcte")
        else:
            print("   ‚ùå Erreur de r√©versibilit√©")
    
    print(f"\nüìä Mappings cr√©√©s: {len(anonymizer.name_mapping)} √©l√®ves enregistr√©s")
    
    return anonymizer

def test_openai_service_rgpd():
    """Test du service OpenAI avec anonymisation"""
    print("\n\nü§ñ Test du service OpenAI avec anonymisation RGPD")
    print("=" * 60)
    
    try:
        # Cr√©er le service avec RGPD activ√©
        service_rgpd = OpenAIService(enable_rgpd=True)
        print("‚úÖ Service OpenAI avec RGPD cr√©√©")
        
        # Cr√©er le service sans RGPD pour comparaison
        service_normal = OpenAIService(enable_rgpd=False)
        print("‚úÖ Service OpenAI sans RGPD cr√©√©")
        
        # Test avec une appr√©ciation contenant un nom
        nom, prenom = "DANLER", "Suheda"
        appreciation = "Suheda est une √©l√®ve s√©rieuse. Elle doit continuer √† fournir des efforts."
        
        print(f"\nüìù Test avec l'√©l√®ve: {nom} {prenom}")
        print(f"Appr√©ciation originale: {appreciation}")
        
        # Simulation d'anonymisation (sans vraiment appeler l'API)
        if service_rgpd.anonymizer:
            anonymized = service_rgpd.anonymizer.anonymize_text(appreciation, nom, prenom)
            print(f"üîí Version anonymis√©e: {anonymized}")
            
            deanonymized = service_rgpd.anonymizer.deanonymize_text(anonymized, nom, prenom)
            print(f"üîì Version d√©sanonymis√©e: {deanonymized}")
        
        print("\n‚úÖ Service OpenAI avec anonymisation RGPD op√©rationnel")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur lors du test du service OpenAI: {e}")
        print("   (Ceci est normal si la cl√© API OpenAI n'est pas configur√©e)")

def demo_with_bulletin():
    """D√©monstration avec un bulletin complet"""
    print("\n\nüìã Test avec un bulletin complet")
    print("=" * 40)
    
    # Cr√©er un √©l√®ve de test
    eleve = Eleve(nom="DANLER", prenom="Suheda", classe="4√®me A")
    
    # Cr√©er des appr√©ciations avec le nom de l'√©l√®ve
    anglais = AppreciationMatiere(
        matiere="Anglais LV1",
        moyenne_s1=5.0,
        moyenne_s2=6.0,
        appreciation_s1="Suheda est une √©l√®ve du dispositif ULIS. Elle assiste calmement au cours.",
        appreciation_s2="Suheda a fait des progr√®s ce semestre. Elle doit continuer ses efforts."
    )
    
    arts = AppreciationMatiere(
        matiere="Arts Plastiques", 
        moyenne_s1=8.0,
        appreciation_s1="Suheda fait tout juste le minimum. Il faut se ressaisir!"
    )
    
    # Cr√©er le bulletin
    bulletin = Bulletin(
        eleve=eleve,
        matieres={"Anglais LV1": anglais, "Arts Plastiques": arts},
        appreciation_generale_s1="Suheda est une √©l√®ve s√©rieuse et volontaire."
    )
    
    print(f"üë§ √âl√®ve: {eleve.nom} {eleve.prenom}")
    print(f"üìö Nombre de mati√®res: {len(bulletin.matieres)}")
    
    # Test d'anonymisation sur les appr√©ciations
    anonymizer = RGPDAnonymizer()
    
    for nom_matiere, matiere in bulletin.matieres.items():
        print(f"\nüìñ Mati√®re: {nom_matiere}")
        
        if matiere.appreciation_s1:
            print(f"   S1 original  : {matiere.appreciation_s1}")
            anonymized = anonymizer.anonymize_text(matiere.appreciation_s1, eleve.nom, eleve.prenom)
            print(f"   S1 anonymis√© : {anonymized}")
        
        if matiere.appreciation_s2:
            print(f"   S2 original  : {matiere.appreciation_s2}")
            anonymized = anonymizer.anonymize_text(matiere.appreciation_s2, eleve.nom, eleve.prenom)
            print(f"   S2 anonymis√© : {anonymized}")
    
    # Test sur l'appr√©ciation g√©n√©rale
    if bulletin.appreciation_generale_s1:
        print(f"\nüìã Appr√©ciation g√©n√©rale S1:")
        print(f"   Original  : {bulletin.appreciation_generale_s1}")
        anonymized = anonymizer.anonymize_text(bulletin.appreciation_generale_s1, eleve.nom, eleve.prenom)
        print(f"   Anonymis√© : {anonymized}")

def main():
    """Fonction principale de d√©monstration"""
    print("üîí D√âMONSTRATION ANONYMISATION RGPD BGRAPP PYCONSEIL")
    print("=" * 60)
    print("Cette d√©monstration teste le syst√®me d'anonymisation RGPD")
    print("qui prot√®ge les donn√©es personnelles des √©l√®ves lors des")
    print("appels √† l'API OpenAI.")
    
    # Test de base de l'anonymiseur
    anonymizer = test_rgpd_anonymizer()
    
    # Test du service OpenAI avec RGPD
    test_openai_service_rgpd()
    
    # D√©monstration avec un bulletin complet
    demo_with_bulletin()
    
    print("\n\n‚úÖ D√âMONSTRATION TERMIN√âE")
    print("=" * 30)
    print("Le syst√®me d'anonymisation RGPD est fonctionnel.")
    print("Les noms et pr√©noms des √©l√®ves sont automatiquement")
    print("remplac√©s par 'John DOE' avant envoi √† OpenAI, puis")
    print("restaur√©s dans les r√©ponses.")
    print("\nüîí Confidentialit√© RGPD respect√©e !")

if __name__ == "__main__":
    main() 