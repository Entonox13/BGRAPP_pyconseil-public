#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Fen√™tre de configuration IA de l'application BGRAPP Pyconseil
Interface pour configurer les cl√©s API et mod√®les des fournisseurs IA
"""

import tkinter as tk
from tkinter import ttk, messagebox
from typing import Dict, Optional, Callable
import logging
import threading

# Import conditionnel
try:
    from ..services.ai_config_service import AIConfigService, AIProvider, get_ai_config_service
    from ..services.ai_connection_test_service import get_ai_connection_test_service
except ImportError:
    import sys
    from pathlib import Path
    sys.path.insert(0, str(Path(__file__).parent.parent))
    from services.ai_config_service import AIConfigService, AIProvider, get_ai_config_service
    from services.ai_connection_test_service import get_ai_connection_test_service


class ConfigWindow:
    """Fen√™tre de configuration des fournisseurs IA"""
    
    def __init__(self, parent_window=None, on_config_changed: Optional[Callable] = None):
        self.parent_window = parent_window
        self.on_config_changed = on_config_changed
        self.logger = logging.getLogger(__name__)
        
        # Services
        self.config_service = get_ai_config_service()
        self.test_service = get_ai_connection_test_service()
        
        # Variables tkinter pour les widgets (initialis√©es apr√®s cr√©ation de la fen√™tre)
        self.api_key_vars: Dict[AIProvider, tk.StringVar] = {}
        self.model_vars: Dict[AIProvider, tk.StringVar] = {}
        self.active_provider_var = None
        
        # √âtat du test de connexion
        self.test_in_progress = False
        
        # Widgets pour acc√®s direct
        self.model_combos: Dict[AIProvider, ttk.Combobox] = {}
        self.api_key_entries: Dict[AIProvider, ttk.Entry] = {}
        self.enabled_radiobuttons: Dict[AIProvider, ttk.Radiobutton] = {}
        self.test_button = None  # R√©f√©rence au bouton de test
        
        # Cr√©er la fen√™tre
        self.root = tk.Toplevel() if parent_window else tk.Tk()
        self.root.title("Configuration IA - BGRAPP Pyconseil")
        self.root.geometry("700x600")
        if parent_window:
            self.root.transient(parent_window.root if hasattr(parent_window, 'root') else parent_window)
            self.root.grab_set()  # Fen√™tre modale
        
        self._setup_styles()
        self._init_variables()
        self._create_interface()
        self._load_current_config()
        
        self.root.protocol("WM_DELETE_WINDOW", self._on_closing)
    
    def _setup_styles(self):
        """Configure les styles de l'interface"""
        style = ttk.Style()
        style.configure('Title.TLabel', font=('Arial', 16, 'bold'))
        style.configure('Subtitle.TLabel', font=('Arial', 12, 'bold'))
        style.configure('Info.TLabel', font=('Arial', 10))
        style.configure('Success.TLabel', font=('Arial', 10), foreground='green')
        style.configure('Error.TLabel', font=('Arial', 10), foreground='red')
        style.configure('Warning.TLabel', font=('Arial', 10), foreground='orange')
    
    def _init_variables(self):
        """Initialise les variables tkinter"""
        for provider in AIProvider:
            self.api_key_vars[provider] = tk.StringVar(self.root)
            self.model_vars[provider] = tk.StringVar(self.root)
        
        self.active_provider_var = tk.StringVar(self.root)
        self.active_provider_var.set("openai")  # Valeur par d√©faut
    
    def _create_interface(self):
        """Cr√©e l'interface de configuration"""
        # Frame principal avec scrollbar
        main_frame = ttk.Frame(self.root, padding="15")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        
        # Titre
        title_label = ttk.Label(
            main_frame,
            text="ü§ñ Configuration des fournisseurs IA",
            style='Title.TLabel'
        )
        title_label.grid(row=0, column=0, pady=(0, 20), sticky=tk.W)
        
        # Frame √† onglets pour chaque fournisseur
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 15))
        main_frame.rowconfigure(1, weight=1)
        
        # Cr√©er un onglet pour chaque fournisseur
        self.provider_frames = {}
        for provider in AIProvider:
            frame = self._create_provider_tab(provider)
            self.provider_frames[provider] = frame
            self.notebook.add(frame, text=self._get_provider_display_name(provider))
        
        # Section de statut
        self._create_status_section(main_frame, 2)
        
        # Boutons d'action
        self._create_action_buttons(main_frame, 3)
    
    def _create_provider_tab(self, provider: AIProvider) -> ttk.Frame:
        """Cr√©e l'onglet de configuration pour un fournisseur"""
        frame = ttk.Frame(self.notebook, padding="10")
        frame.columnconfigure(1, weight=1)
        
        # Bouton radio d'activation (seul un fournisseur peut √™tre actif)
        enabled_frame = ttk.Frame(frame)
        enabled_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 15))
        
        self.enabled_radiobuttons[provider] = ttk.Radiobutton(
            enabled_frame,
            text=f"Utiliser {self._get_provider_display_name(provider)}",
            variable=self.active_provider_var,
            value=provider.value,
            command=lambda p=provider: self._on_provider_selected(p)
        )
        self.enabled_radiobuttons[provider].grid(row=0, column=0, sticky=tk.W)
        
        # Configuration sp√©cifique selon le provider
        if provider == AIProvider.LOCAL:
            # URL de base pour les LLMs locaux
            ttk.Label(frame, text="URL du serveur local:", style='Subtitle.TLabel').grid(
                row=1, column=0, sticky=tk.W, pady=(10, 5)
            )
            
            self.api_key_entries[provider] = ttk.Entry(
                frame,
                textvariable=self.api_key_vars[provider],
                width=50
                # Pas de masquage pour les URLs
            )
            self.api_key_entries[provider].grid(
                row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10)
            )
            
            # Info pour LOCAL
            local_info = ttk.Label(
                frame,
                text="Exemples: http://localhost:11434 (Ollama), http://localhost:1234 (LM Studio)",
                foreground="gray"
            )
            local_info.grid(row=3, column=0, columnspan=2, sticky=tk.W, pady=(0, 15))
        else:
            # Cl√© API pour les autres providers
            ttk.Label(frame, text="Cl√© API:", style='Subtitle.TLabel').grid(
                row=1, column=0, sticky=tk.W, pady=(10, 5)
            )
            
            self.api_key_entries[provider] = ttk.Entry(
                frame,
                textvariable=self.api_key_vars[provider],
                width=50,
                show="*"  # Masquer la cl√© API
            )
            self.api_key_entries[provider].grid(
                row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10)
            )
            
            # Bouton pour afficher/masquer la cl√©
            show_hide_btn = ttk.Button(
                frame,
                text="üëÅ Afficher",
                command=lambda p=provider: self._toggle_api_key_visibility(p)
            )
            show_hide_btn.grid(row=3, column=0, sticky=tk.W, pady=(0, 15))
        
        # Mod√®le
        ttk.Label(frame, text="Mod√®le:", style='Subtitle.TLabel').grid(
            row=4, column=0, sticky=tk.W, pady=(10, 5)
        )
        
        self.model_combos[provider] = ttk.Combobox(
            frame,
            textvariable=self.model_vars[provider],
            values=self.config_service.get_available_models(provider),
            state="readonly",
            width=40
        )
        self.model_combos[provider].grid(
            row=5, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 15)
        )
        
        # Informations sur le fournisseur
        info_label = ttk.Label(
            frame,
            text=self._get_provider_info(provider),
            style='Info.TLabel',
            wraplength=600
        )
        info_label.grid(row=6, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(15, 0))
        
        return frame
    

    
    def _create_status_section(self, parent: ttk.Frame, row: int):
        """Cr√©e la section d'√©tat de la configuration"""
        # Frame pour le statut
        status_frame = ttk.Frame(parent)
        status_frame.grid(row=row, column=0, sticky=(tk.W, tk.E), pady=15)
        status_frame.columnconfigure(0, weight=1)
        
        ttk.Label(
            status_frame,
            text="üìä √âtat de la configuration",
            style='Subtitle.TLabel'
        ).grid(row=0, column=0, sticky=tk.W, pady=(0, 10))
        
        # Zone de texte pour le statut
        self.status_text = tk.Text(
            status_frame,
            height=4,
            width=70,
            state='disabled',
            font=('Consolas', 9),
            wrap=tk.WORD
        )
        self.status_text.grid(row=1, column=0, sticky=(tk.W, tk.E))
        
        # Scrollbar
        status_scrollbar = ttk.Scrollbar(status_frame, orient=tk.VERTICAL, command=self.status_text.yview)
        status_scrollbar.grid(row=1, column=1, sticky=(tk.N, tk.S))
        self.status_text.configure(yscrollcommand=status_scrollbar.set)
    
    def _create_action_buttons(self, parent: ttk.Frame, row: int):
        """Cr√©e les boutons d'action"""
        # Frame pour les boutons
        button_frame = ttk.Frame(parent)
        button_frame.grid(row=row, column=0, sticky=(tk.W, tk.E), pady=15)
        
        # Bouton Test de connexion
        self.test_button = ttk.Button(
            button_frame,
            text="üîß Tester la connexion",
            command=self._test_connection
        )
        self.test_button.grid(row=0, column=0, padx=(0, 10))
        
        # Bouton Sauvegarder
        save_btn = ttk.Button(
            button_frame,
            text="üíæ Sauvegarder",
            command=self._save_configuration
        )
        save_btn.grid(row=0, column=1, padx=(0, 10))
        
        # Bouton Annuler
        cancel_btn = ttk.Button(
            button_frame,
            text="‚ùå Annuler",
            command=self._on_closing
        )
        cancel_btn.grid(row=0, column=2, padx=(0, 20))
        
        # Bouton Aide
        help_btn = ttk.Button(
            button_frame,
            text="‚ùì Aide",
            command=self._show_help
        )
        help_btn.grid(row=0, column=3)
    
    def _get_provider_display_name(self, provider: AIProvider) -> str:
        """R√©cup√®re le nom d'affichage d'un fournisseur"""
        names = {
            AIProvider.OPENAI: "OpenAI",
            AIProvider.ANTHROPIC: "Anthropic Claude", 
            AIProvider.GEMINI: "Google Gemini",
            AIProvider.LOCAL: "LLM Local"
        }
        return names.get(provider, provider.value)
    
    def _get_provider_info(self, provider: AIProvider) -> str:
        """R√©cup√®re les informations d'un fournisseur"""
        infos = {
            AIProvider.OPENAI: "OpenAI GPT - Mod√®les polyvalents pour g√©n√©ration de texte et conversation. Recommand√© : gpt-4o-mini pour un bon √©quilibre performance/co√ªt.",
            AIProvider.ANTHROPIC: "Anthropic Claude - Mod√®les ax√©s sur la s√©curit√© et l'utilit√©. Excellent pour les t√¢ches d'analyse et de r√©daction longue.",
            AIProvider.GEMINI: "Google Gemini - Mod√®les multimodaux de Google. Bonne performance pour l'analyse de texte et la g√©n√©ration cr√©ative.",
            AIProvider.LOCAL: "LLM Local - Mod√®les locaux via Ollama, LM Studio, etc. Avantages : confidentialit√©, pas de co√ªts API, contr√¥le total. URL par d√©faut : http://localhost:11434"
        }
        return infos.get(provider, "")
    
    def _load_current_config(self):
        """Charge la configuration actuelle dans l'interface"""
        for provider in AIProvider:
            if provider == AIProvider.LOCAL:
                # Pour LOCAL, charger l'URL de base
                base_url = self.config_service.get_base_url(provider)
                if base_url:
                    self.api_key_vars[provider].set(base_url)
                else:
                    # URL par d√©faut pour LOCAL
                    self.api_key_vars[provider].set("http://localhost:11434")
            else:
                # Pour les autres, charger les cl√©s API
                api_key = self.config_service.get_api_key(provider)
                if api_key:
                    self.api_key_vars[provider].set(api_key)
            
            # Charger les mod√®les
            model = self.config_service.get_model(provider)
            self.model_vars[provider].set(model)
        
        # Charger le fournisseur actif (pour s√©lectionner le bon bouton radio)
        active_provider = self.config_service.get_enabled_provider()
        if active_provider:
            self.active_provider_var.set(active_provider.value)
        
        # Mettre √† jour le statut
        self._update_status()
    
    def _update_status(self):
        """Met √† jour l'affichage du statut"""
        validation = self.config_service.validate_configuration()
        
        self.status_text.config(state='normal')
        self.status_text.delete(1.0, tk.END)
        
        # √âtat g√©n√©ral
        if validation['valid']:
            self.status_text.insert(tk.END, "‚úÖ Configuration valide\n", "success")
        else:
            self.status_text.insert(tk.END, "‚ùå Configuration invalide\n", "error")
        
        # Fournisseurs avec cl√©s
        providers_with_keys = validation['providers_with_keys']
        if providers_with_keys:
            names = [self._get_provider_display_name(p) for p in providers_with_keys]
            self.status_text.insert(tk.END, f"üîë Cl√©s configur√©es: {', '.join(names)}\n")
        
        # Fournisseur actif
        enabled_provider = validation['enabled_provider']
        if enabled_provider:
            name = self._get_provider_display_name(enabled_provider)
            self.status_text.insert(tk.END, f"üéØ Fournisseur actif: {name}\n")
        
        # Erreurs et avertissements
        for error in validation['errors']:
            self.status_text.insert(tk.END, f"‚ùå Erreur: {error}\n", "error")
        
        for warning in validation['warnings']:
            self.status_text.insert(tk.END, f"‚ö†Ô∏è Avertissement: {warning}\n", "warning")
        
        # Configuration des tags de couleur
        self.status_text.tag_config("success", foreground="green")
        self.status_text.tag_config("error", foreground="red")
        self.status_text.tag_config("warning", foreground="orange")
        
        self.status_text.config(state='disabled')
    
    def _toggle_api_key_visibility(self, provider: AIProvider):
        """Basculer la visibilit√© de la cl√© API"""
        entry = self.api_key_entries[provider]
        current_show = entry.cget('show')
        
        if current_show == '*':
            entry.config(show='')
        else:
            entry.config(show='*')
    
    def _on_provider_selected(self, provider: AIProvider):
        """G√®re la s√©lection d'un fournisseur comme fournisseur actif"""
        try:
            # Le fournisseur s√©lectionn√© devient automatiquement le fournisseur actif
            self.config_service.set_enabled_provider(provider)
            self._update_status()
        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur lors de la s√©lection du fournisseur: {e}")
    

    
    def _test_connection(self):
        """Teste la connexion avec le fournisseur actif"""
        if self.test_in_progress:
            return
        
        active_provider_str = self.active_provider_var.get()
        try:
            active_provider = AIProvider(active_provider_str)
        except ValueError:
            messagebox.showerror("Erreur", "Aucun fournisseur actif s√©lectionn√©")
            return
        
        # V√©rifier la configuration selon le provider
        if active_provider == AIProvider.LOCAL:
            # Pour LOCAL, v√©rifier l'URL de base
            base_url = self.api_key_vars[active_provider].get().strip()
            if not base_url:
                messagebox.showerror(
                    "Erreur", 
                    f"Aucune URL configur√©e pour {self._get_provider_display_name(active_provider)}"
                )
                return
            api_key = ""  # Pas de cl√© API n√©cessaire pour LOCAL
        else:
            # Pour les autres providers, v√©rifier la cl√© API
            api_key = self.api_key_vars[active_provider].get().strip()
            if not api_key:
                messagebox.showerror(
                    "Erreur", 
                    f"Aucune cl√© API configur√©e pour {self._get_provider_display_name(active_provider)}"
                )
                return
        
        # Obtenir le mod√®le s√©lectionn√©
        model = self.model_vars[active_provider].get()
        if not model:
            messagebox.showerror("Erreur", f"Aucun mod√®le s√©lectionn√© pour {self._get_provider_display_name(active_provider)}")
            return
        
        # Lancer le test en arri√®re-plan
        self._start_connection_test(active_provider, api_key, model)
    
    def _start_connection_test(self, provider: AIProvider, api_key: str, model: str):
        """Lance le test de connexion en arri√®re-plan"""
        self.test_in_progress = True
        
        # D√©sactiver le bouton et changer le texte
        if self.test_button:
            self.test_button.config(state='disabled', text="üîÑ Test en cours...")
        
        # Mettre √† jour le statut
        self.status_text.config(state='normal')
        self.status_text.insert(tk.END, f"üîÑ Test de connexion {self._get_provider_display_name(provider)} en cours...\n")
        self.status_text.config(state='disabled')
        self.status_text.see(tk.END)
        
        # Lancer le test dans un thread s√©par√©
        def test_thread():
            try:
                result = self.test_service.test_connection(provider, api_key, model)
                # Programmer la mise √† jour de l'interface dans le thread principal
                self.root.after(0, lambda: self._on_test_completed(result))
            except Exception as e:
                self.logger.error(f"Erreur dans le thread de test: {e}")
                self.root.after(0, lambda: self._on_test_error(str(e)))
        
        thread = threading.Thread(target=test_thread, daemon=True)
        thread.start()
    
    def _on_test_completed(self, result):
        """G√®re la fin du test de connexion"""
        self.test_in_progress = False
        
        # R√©activer le bouton
        if self.test_button:
            self.test_button.config(state='normal', text="üîß Tester la connexion")
        
        # Mettre √† jour le statut
        self.status_text.config(state='normal')
        if result.success:
            self.status_text.insert(tk.END, f"{result.message}\n", "success")
            # Afficher les d√©tails si disponibles
            if result.details and result.details.get('usage'):
                usage = result.details['usage']
                if isinstance(usage, dict):
                    if 'input_tokens' in usage:  # Anthropic
                        self.status_text.insert(tk.END, f"   üìä Tokens: {usage.get('input_tokens', 0)} entr√©e, {usage.get('output_tokens', 0)} sortie\n", "success")
                    elif 'prompt_token_count' in usage:  # Gemini
                        self.status_text.insert(tk.END, f"   üìä Tokens: {usage.get('prompt_token_count', 0)} prompt\n", "success")
                    elif 'total_tokens' in usage:  # OpenAI
                        self.status_text.insert(tk.END, f"   üìä Tokens: {usage.get('total_tokens', 0)} total\n", "success")
        else:
            self.status_text.insert(tk.END, f"{result.message}\n", "error")
            
            # Afficher des conseils selon le type d'erreur
            error_type = result.details.get('error_type', '')
            if error_type == 'client_missing':
                requirements = self.test_service.get_connection_requirements(AIProvider(self.active_provider_var.get()))
                if requirements:
                    self.status_text.insert(tk.END, f"   üí° Commande: {requirements.get('install_command', '')}\n", "warning")
            elif error_type == 'invalid_key':
                requirements = self.test_service.get_connection_requirements(AIProvider(self.active_provider_var.get()))
                if requirements:
                    self.status_text.insert(tk.END, f"   üí° Obtenez votre cl√©: {requirements.get('api_key_url', '')}\n", "warning")
        
        self.status_text.config(state='disabled')
        self.status_text.see(tk.END)
        
        # Afficher une messagebox avec le r√©sultat
        if result.success:
            messagebox.showinfo("Test r√©ussi", result.message)
        else:
            messagebox.showerror("Test √©chou√©", result.message)
    
    def _on_test_error(self, error_message: str):
        """G√®re les erreurs du test de connexion"""
        self.test_in_progress = False
        
        # R√©activer le bouton
        if self.test_button:
            self.test_button.config(state='normal', text="üîß Tester la connexion")
        
        # Mettre √† jour le statut
        self.status_text.config(state='normal')
        self.status_text.insert(tk.END, f"‚ùå Erreur lors du test: {error_message}\n", "error")
        self.status_text.config(state='disabled')
        self.status_text.see(tk.END)
        
        messagebox.showerror("Erreur de test", f"Erreur lors du test de connexion:\n{error_message}")
    
    def _save_configuration(self):
        """Sauvegarde la configuration"""
        try:
            # Sauvegarder les cl√©s API/URLs et mod√®les
            for provider in AIProvider:
                value = self.api_key_vars[provider].get().strip()
                model = self.model_vars[provider].get()
                
                if provider == AIProvider.LOCAL:
                    # Pour LOCAL, sauvegarder l'URL de base
                    if value:
                        self.config_service.set_base_url(provider, value)
                else:
                    # Pour les autres, sauvegarder la cl√© API
                    self.config_service.set_api_key(provider, value)
                
                # Sauvegarder le mod√®le
                if model:
                    self.config_service.set_model(provider, model)
            
            # Sauvegarder le fournisseur actif (celui s√©lectionn√© par le bouton radio)
            active_provider_str = self.active_provider_var.get()
            if active_provider_str:
                try:
                    active_provider = AIProvider(active_provider_str)
                    # V√©rifier la configuration selon le provider
                    if active_provider == AIProvider.LOCAL:
                        # LOCAL est toujours disponible s'il a une URL
                        base_url = self.config_service.get_base_url(active_provider)
                        if base_url:
                            self.config_service.set_enabled_provider(active_provider)
                        else:
                            messagebox.showwarning(
                                "Avertissement",
                                f"Impossible de d√©finir {self._get_provider_display_name(active_provider)} "
                                f"comme fournisseur actif : aucune URL configur√©e"
                            )
                    else:
                        # V√©rifier qu'il a une cl√© API pour les autres providers
                        if self.config_service.get_api_key(active_provider):
                            self.config_service.set_enabled_provider(active_provider)
                        else:
                            messagebox.showwarning(
                                "Avertissement",
                                f"Impossible de d√©finir {self._get_provider_display_name(active_provider)} "
                                f"comme fournisseur actif : aucune cl√© API configur√©e"
                            )
                except ValueError:
                    pass
            
            # Mettre √† jour le statut
            self._update_status()
            
            # Notifier le parent si callback fourni
            if self.on_config_changed:
                self.on_config_changed()
            
            messagebox.showinfo("Succ√®s", "Configuration sauvegard√©e avec succ√®s!")
            
        except Exception as e:
            self.logger.error(f"Erreur lors de la sauvegarde: {e}")
            messagebox.showerror("Erreur", f"Erreur lors de la sauvegarde: {str(e)}")
    
    def _show_help(self):
        """Affiche l'aide de configuration"""
        help_text = """
ü§ñ Aide - Configuration des fournisseurs IA

üìã Configuration des cl√©s API:
‚Ä¢ OpenAI: Obtenez votre cl√© sur https://platform.openai.com/api-keys
‚Ä¢ Anthropic: Obtenez votre cl√© sur https://console.anthropic.com/
‚Ä¢ Google Gemini: Obtenez votre cl√© sur https://makersuite.google.com/app/apikey

üéØ S√©lection du mod√®le:
‚Ä¢ Choisissez le mod√®le selon vos besoins de performance et co√ªt
‚Ä¢ Les mod√®les "mini" sont g√©n√©ralement plus √©conomiques
‚Ä¢ Les mod√®les plus grands offrent de meilleures performances

‚öôÔ∏è Configuration:
1. Renseignez les cl√©s API pour les fournisseurs souhait√©s
2. S√©lectionnez les mod√®les pr√©f√©r√©s
3. Choisissez le fournisseur actif (boutons radio)
4. Testez la connexion
5. Sauvegardez

üîí S√©curit√©:
‚Ä¢ Les cl√©s API sont stock√©es localement dans le fichier .env
‚Ä¢ Elles ne sont jamais partag√©es ni transmises ailleurs
        """
        
        # Cr√©er une fen√™tre d'aide
        help_window = tk.Toplevel(self.root)
        help_window.title("Aide - Configuration IA")
        help_window.geometry("600x500")
        help_window.transient(self.root)
        help_window.grab_set()
        
        # Texte d'aide avec scrollbar
        text_frame = ttk.Frame(help_window, padding="10")
        text_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        help_window.columnconfigure(0, weight=1)
        help_window.rowconfigure(0, weight=1)
        text_frame.columnconfigure(0, weight=1)
        text_frame.rowconfigure(0, weight=1)
        
        help_text_widget = tk.Text(
            text_frame,
            wrap=tk.WORD,
            font=('Arial', 10),
            state='normal'
        )
        help_text_widget.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        scrollbar = ttk.Scrollbar(text_frame, orient=tk.VERTICAL, command=help_text_widget.yview)
        scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        help_text_widget.configure(yscrollcommand=scrollbar.set)
        
        help_text_widget.insert(1.0, help_text)
        help_text_widget.config(state='disabled')
        
        # Bouton fermer
        close_btn = ttk.Button(
            text_frame,
            text="Fermer",
            command=help_window.destroy
        )
        close_btn.grid(row=1, column=0, pady=(10, 0))
    
    def _on_closing(self):
        """G√®re la fermeture de la fen√™tre"""
        self.root.destroy()
    
    def run(self):
        """Lance la fen√™tre de configuration"""
        self.root.mainloop()


def main():
    """Point d'entr√©e pour les tests"""
    window = ConfigWindow()
    window.run()


if __name__ == "__main__":
    main() 