#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
D√©monstration des tests de connexion IA - BGRAPP Pyconseil
Script pour tester la fonctionnalit√© de test de connexion aux fournisseurs IA
"""

import logging
import sys
from pathlib import Path

# Ajouter le r√©pertoire src au PATH
sys.path.insert(0, str(Path(__file__).parent / "src"))

from services.ai_config_service import AIProvider, get_ai_config_service
from services.ai_connection_test_service import get_ai_connection_test_service

def setup_logging():
    """Configure le logging pour les tests"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

def test_without_api_keys():
    """Teste les connexions sans cl√©s API configur√©es"""
    print("=" * 60)
    print("TEST 1: Tests sans cl√©s API configur√©es")
    print("=" * 60)
    
    test_service = get_ai_connection_test_service()
    
    for provider in AIProvider:
        print(f"\nüîß Test de {provider.value}...")
        
        # Test avec cl√© vide
        result = test_service.test_connection(provider, "", "gpt-4o-mini")
        print(f"   R√©sultat: {'‚úÖ' if result.success else '‚ùå'} {result.message}")
        
        # Afficher les pr√©requis
        requirements = test_service.get_connection_requirements(provider)
        if requirements:
            print(f"   Client disponible: {'‚úÖ' if requirements['client_available'] else '‚ùå'}")
            if not requirements['client_available']:
                print(f"   Installation: {requirements['install_command']}")

def test_with_fake_keys():
    """Teste les connexions avec de fausses cl√©s API"""
    print("\n" + "=" * 60)
    print("TEST 2: Tests avec de fausses cl√©s API")
    print("=" * 60)
    
    test_service = get_ai_connection_test_service()
    config_service = get_ai_config_service()
    
    fake_keys = {
        AIProvider.OPENAI: "sk-fake1234567890abcdef",
        AIProvider.ANTHROPIC: "sk-ant-fake1234567890abcdef", 
        AIProvider.GEMINI: "fake-google-api-key-1234567890"
    }
    
    for provider in AIProvider:
        print(f"\nüîß Test de {provider.value} avec fausse cl√©...")
        
        fake_key = fake_keys[provider]
        model = config_service.get_model(provider)
        
        result = test_service.test_connection(provider, fake_key, model)
        print(f"   R√©sultat: {'‚úÖ' if result.success else '‚ùå'} {result.message}")
        
        if result.details:
            error_type = result.details.get('error_type', 'unknown')
            print(f"   Type d'erreur: {error_type}")

def test_client_availability():
    """Teste la disponibilit√© des clients IA"""
    print("\n" + "=" * 60)
    print("TEST 3: Disponibilit√© des clients IA")
    print("=" * 60)
    
    test_service = get_ai_connection_test_service()
    
    for provider in AIProvider:
        requirements = test_service.get_connection_requirements(provider)
        print(f"\nüîß {provider.value}:")
        print(f"   Client install√©: {'‚úÖ' if requirements['client_available'] else '‚ùå'}")
        print(f"   URL cl√© API: {requirements['api_key_url']}")
        print(f"   Commande d'installation: {requirements['install_command']}")

def test_config_integration():
    """Teste l'int√©gration avec le service de configuration"""
    print("\n" + "=" * 60)
    print("TEST 4: Int√©gration avec la configuration")
    print("=" * 60)
    
    config_service = get_ai_config_service()
    
    for provider in AIProvider:
        print(f"\nüîß Configuration {provider.value}:")
        
        api_key = config_service.get_api_key(provider)
        model = config_service.get_model(provider)
        models_available = config_service.get_available_models(provider)
        
        print(f"   Cl√© API configur√©e: {'‚úÖ' if api_key else '‚ùå'}")
        if api_key:
            masked_key = api_key[:8] + "..." + api_key[-4:] if len(api_key) > 12 else "***"
            print(f"   Cl√© (masqu√©e): {masked_key}")
        
        print(f"   Mod√®le configur√©: {model}")
        print(f"   Mod√®les disponibles: {len(models_available)}")

def interactive_test():
    """Permet de tester interactivement avec de vraies cl√©s"""
    print("\n" + "=" * 60)
    print("TEST 5: Test interactif (optionnel)")
    print("=" * 60)
    
    print("Vous pouvez maintenant tester avec vos vraies cl√©s API.")
    print("Lancez la fen√™tre de configuration pour saisir vos cl√©s et tester.")
    
    try:
        from gui.config_window import ConfigWindow
        print("\nüöÄ Ouverture de la fen√™tre de configuration...")
        
        # Cr√©er et lancer la fen√™tre de configuration
        config_window = ConfigWindow()
        config_window.run()
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        print("Assurez-vous que tous les modules sont correctement install√©s.")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ouverture de la fen√™tre: {e}")

def main():
    """Point d'entr√©e principal"""
    setup_logging()
    
    print("ü§ñ D√©monstration des tests de connexion IA - BGRAPP Pyconseil")
    print("================================================================")
    
    try:
        # Tests automatiques
        test_client_availability()
        test_without_api_keys()
        test_with_fake_keys()
        test_config_integration()
        
        # Test interactif
        print("\n" + "=" * 60)
        choice = input("Voulez-vous lancer l'interface graphique pour tester avec vos cl√©s ? (y/N): ")
        if choice.lower() in ['y', 'yes', 'o', 'oui']:
            interactive_test()
        
        print("\n‚úÖ D√©monstration termin√©e avec succ√®s !")
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è D√©monstration interrompue par l'utilisateur.")
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la d√©monstration: {e}")
        logging.exception("Erreur d√©taill√©e:")

if __name__ == "__main__":
    main() 