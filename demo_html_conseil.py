#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
D√©monstration de l'affichage HTML dans la fen√™tre conseil
Application BGRAPP Pyconseil
"""

import os
import sys
import json
from pathlib import Path

# Ajouter le chemin src au path Python
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from models.bulletin import Bulletin, Eleve, AppreciationMatiere
from gui.conseil_window import ConseilWindow


def create_test_data_with_html():
    """Cr√©er des donn√©es de test avec balises HTML"""
    
    # Cr√©er des bulletins avec appr√©ciations HTML
    bulletins = []
    
    # √âl√®ve 1 - Bon √©l√®ve
    eleve1 = Eleve(nom="MARTIN", prenom="Alice", classe="3A")
    bulletin1 = Bulletin(
        eleve=eleve1,
        appreciation_generale_s1="√âl√®ve <span class=\"positif\">s√©rieuse et appliqu√©e</span>.",
        appreciation_generale_s2="<span class=\"positif\">Excellent travail</span> cette ann√©e, <span class=\"positif\">f√©licitations</span> !"
    )
    
    # Math√©matiques
    math_appr = AppreciationMatiere(
        matiere="Math√©matiques",
        moyenne_s1=15.5,
        moyenne_s2=16.2,
        heures_absence_s1=0,
        heures_absence_s2=2,
        appreciation_s1="√âl√®ve <span class=\"positif\">tr√®s dou√©e</span> en math√©matiques.",
        appreciation_s2="<span class=\"positif\">Excellent niveau</span>, continue ainsi !"
    )
    bulletin1.add_matiere(math_appr)
    
    # Fran√ßais
    francais_appr = AppreciationMatiere(
        matiere="Fran√ßais",
        moyenne_s1=14.0,
        moyenne_s2=15.5,
        heures_absence_s1=1,
        heures_absence_s2=0,
        appreciation_s1="Bon travail mais <span class=\"negatif\">quelques difficult√©s en expression √©crite</span>.",
        appreciation_s2="<span class=\"positif\">Nette am√©lioration</span> depuis le premier semestre."
    )
    bulletin1.add_matiere(francais_appr)
    
    bulletins.append(bulletin1)
    
    # √âl√®ve 2 - √âl√®ve en difficult√©
    eleve2 = Eleve(nom="DUPONT", prenom="Paul", classe="3A")
    bulletin2 = Bulletin(
        eleve=eleve2,
        appreciation_generale_s1="√âl√®ve qui <span class=\"negatif\">rencontre des difficult√©s</span> mais <span class=\"positif\">fait des efforts</span>.",
        appreciation_generale_s2="<span class=\"positif\">Progr√®s encourageants</span> malgr√© quelques <span class=\"negatif\">lacunes persistantes</span>."
    )
    
    # Math√©matiques
    math_appr2 = AppreciationMatiere(
        matiere="Math√©matiques",
        moyenne_s1=8.5,
        moyenne_s2=10.2,
        heures_absence_s1=5,
        heures_absence_s2=3,
        appreciation_s1="<span class=\"negatif\">Grandes difficult√©s</span> en math√©matiques, <span class=\"negatif\">trop d'absences</span>.",
        appreciation_s2="<span class=\"positif\">Am√©lioration notable</span> gr√¢ce aux efforts fournis."
    )
    bulletin2.add_matiere(math_appr2)
    
    # Fran√ßais
    francais_appr2 = AppreciationMatiere(
        matiere="Fran√ßais",
        moyenne_s1=11.0,
        moyenne_s2=12.5,
        heures_absence_s1=2,
        heures_absence_s2=1,
        appreciation_s1="Travail <span class=\"positif\">r√©gulier</span> mais <span class=\"negatif\">manque de m√©thode</span>.",
        appreciation_s2="<span class=\"positif\">Bonne progression</span> cette ann√©e."
    )
    bulletin2.add_matiere(francais_appr2)
    
    bulletins.append(bulletin2)
    
    return bulletins


def save_test_data(bulletins, filename="output_html_demo.json"):
    """Sauvegarder les donn√©es de test au format JSON"""
    json_data = []
    for bulletin in bulletins:
        json_data.append(bulletin.to_dict())
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(json_data, f, ensure_ascii=False, indent=2)
    
    return filename


def main():
    """D√©monstration de l'affichage HTML dans la fen√™tre conseil"""
    print("üé® D√©monstration affichage HTML - Fen√™tre Conseil")
    print("=" * 55)
    
    # Cr√©er les donn√©es de test avec HTML
    print("üìù Cr√©ation des donn√©es de test avec balises HTML...")
    bulletins = create_test_data_with_html()
    
    # Sauvegarder en JSON
    print("üíæ Sauvegarde des donn√©es de test...")
    json_file = save_test_data(bulletins)
    print(f"‚úÖ Fichier cr√©√©: {json_file}")
    print(f"üìä Taille: {os.path.getsize(json_file) / 1024:.1f} KB")
    
    print("\nüöÄ Lancement de la fen√™tre conseil...")
    print("üé® Fonctionnalit√©s HTML disponibles:")
    print("   ‚Ä¢ Balises <span class=\"positif\"> en vert et gras")
    print("   ‚Ä¢ Balises <span class=\"negatif\"> en rouge et gras")
    print("   ‚Ä¢ Affichage dans la vue d√©taill√©e ET les appr√©ciations g√©n√©rales")
    print("   ‚Ä¢ Support dans toutes les appr√©ciations (S1 et S2)")
    
    try:
        # Cr√©er et lancer la fen√™tre conseil
        conseil_window = ConseilWindow(json_file_path=json_file)
        conseil_window.run()
        
    except Exception as e:
        print(f"‚ùå Erreur lors du lancement: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main() 